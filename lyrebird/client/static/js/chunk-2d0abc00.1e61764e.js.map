{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/razor/razor.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","_monaco","monaco","self","EMPTY_ELEMENTS","wordPattern","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","onEnterRules","beforeText","RegExp","join","afterText","action","indentAction","languages","IndentAction","IndentOutdent","Indent","defaultToken","tokenPostfix","tokenizer","root","token","switchTo","next","doctype","comment","otherTag","script","nextEmbedded","scriptAfterType","scriptAfterTypeEquals","scriptWithCustomType","scriptEmbedded","style","styleAfterType","styleAfterTypeEquals","styleWithCustomType","styleEmbedded","razorInSimpleState","razorInEmbeddedState","razorBlockCommentTopLevel","razorBlockComment","razorRootTopLevel","include","razorRoot","razorCommon","cases","@razorKeywords","@default","razorKeywords","escapes"],"mappings":"gHAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMA,IAAAC,EAAA,qBAAAC,OAAAC,KAAAD,cACAE,EAAA,uHACOL,EAAA,CACPM,YAAA,mFACAC,SAAA,CACAC,aAAA,sBAEAC,SAAA,CACA,qBACA,UACA,KAAW,KACX,WAEAC,iBAAA,CACA,CAASC,KAAA,IAASC,MAAA,KAClB,CAASD,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,MAETC,iBAAA,CACA,CAASF,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,KACT,CAASD,KAAA,IAAAC,MAAA,MAETE,aAAA,CACA,CACAC,WAAA,IAAAC,OAAA,UAAAX,EAAAY,KAAA,iDACAC,UAAA,wBACAC,OAAA,CAAqBC,aAAAlB,EAAAmB,UAAAC,aAAAC,gBAErB,CACAR,WAAA,IAAAC,OAAA,UAAAX,EAAAY,KAAA,iDACAE,OAAA,CAAqBC,aAAAlB,EAAAmB,UAAAC,aAAAE,WAIdvB,EAAA,CACPwB,aAAA,GACAC,aAAA,GAGAC,UAAA,CACAC,KAAA,CACA,OACA,UAAuBC,MAAA,WAAAC,SAAA,6BACvB,wCACA,mCACA,iEACA,kCAAgDD,MAAA,WAAAE,KAAA,aAChD,iCAA+CF,MAAA,WAAAE,KAAA,YAC/C,kCAAgDF,MAAA,WAAAE,KAAA,eAChD,iCAA+CF,MAAA,WAAAE,KAAA,eAC/C,uBACA,eACA,YAEAC,QAAA,CACA,UAAuBH,MAAA,WAAAC,SAAA,gCACvB,iCACA,6BAEAG,QAAA,CACA,UAAuBJ,MAAA,WAAAC,SAAA,gCACvB,8BACA,iCACA,8BAEAI,SAAA,CACA,UAAuBL,MAAA,WAAAC,SAAA,iCACvB,iCACA,gCACA,gCACA,6BACA,kBACA,gBAIAK,OAAA,CACA,UAAuBN,MAAA,WAAAC,SAAA,+BACvB,6CACA,gCACA,gCACA,6BACA,kBACA,MAAmBD,MAAA,iBAAAE,KAAA,kCAAAK,aAAA,oBACnB,eACA,qDAAoEP,MAAA,iBAAAE,KAAA,WAGpEM,gBAAA,CACA,UAAuBR,MAAA,WAAAC,SAAA,wCACvB,2CACA,MAAmBD,MAAA,iBAAAE,KAAA,kCAAAK,aAAA,oBACnB,eACA,kBAA+BP,MAAA,WAAAE,KAAA,UAG/BO,sBAAA,CACA,UAAuBT,MAAA,WAAAC,SAAA,8CACvB,cAA2BD,MAAA,kBAAAC,SAAA,6BAC3B,cAA2BD,MAAA,kBAAAC,SAAA,6BAC3B,MAAmBD,MAAA,iBAAAE,KAAA,kCAAAK,aAAA,oBACnB,eACA,kBAA+BP,MAAA,WAAAE,KAAA,UAG/BQ,qBAAA,CACA,UAAuBV,MAAA,WAAAC,SAAA,iDACvB,MAAmBD,MAAA,iBAAAE,KAAA,sBAAAK,aAAA,QACnB,gCACA,gCACA,6BACA,kBACA,eACA,kBAA+BP,MAAA,WAAAE,KAAA,UAE/BS,eAAA,CACA,UAAuBX,MAAA,WAAAC,SAAA,2CAAAM,aAAA,SACvB,cAA2BP,MAAA,WAAAE,KAAA,OAAAK,aAAA,UAK3BK,MAAA,CACA,UAAuBZ,MAAA,WAAAC,SAAA,8BACvB,4CACA,gCACA,gCACA,6BACA,kBACA,MAAmBD,MAAA,iBAAAE,KAAA,0BAAAK,aAAA,aACnB,eACA,oDAAmEP,MAAA,iBAAAE,KAAA,WAGnEW,eAAA,CACA,UAAuBb,MAAA,WAAAC,SAAA,uCACvB,0CACA,MAAmBD,MAAA,iBAAAE,KAAA,0BAAAK,aAAA,aACnB,eACA,iBAA8BP,MAAA,WAAAE,KAAA,UAG9BY,qBAAA,CACA,UAAuBd,MAAA,WAAAC,SAAA,6CACvB,cAA2BD,MAAA,kBAAAC,SAAA,4BAC3B,cAA2BD,MAAA,kBAAAC,SAAA,4BAC3B,MAAmBD,MAAA,iBAAAE,KAAA,0BAAAK,aAAA,aACnB,eACA,iBAA8BP,MAAA,WAAAE,KAAA,UAG9Ba,oBAAA,CACA,UAAuBf,MAAA,WAAAC,SAAA,gDACvB,MAAmBD,MAAA,iBAAAE,KAAA,qBAAAK,aAAA,QACnB,gCACA,gCACA,6BACA,kBACA,eACA,iBAA8BP,MAAA,WAAAE,KAAA,UAE9Bc,cAAA,CACA,UAAuBhB,MAAA,WAAAC,SAAA,0CAAAM,aAAA,SACvB,aAA0BP,MAAA,WAAAE,KAAA,OAAAK,aAAA,UAG1BU,mBAAA,CACA,kDACA,SAAiB,mCACjB,gCAA8CjB,MAAA,gBAAAC,SAAA,cAC9C,QAAgB,CAAMD,MAAA,aAAAC,SAAA,aACtB,QAAqBD,MAAA,aAAAC,SAAA,cAErBiB,qBAAA,CACA,kDACA,SAAiB,mCACjB,gCAA8ClB,MAAA,gBAAAC,SAAA,WAAAM,aAAA,SAC9C,QAAgB,CAAMP,MAAA,aAAAC,SAAA,WAAAM,aAAA,QACtB,QAAqBP,MAAA,aAAAC,SAAA,WAAAM,aAAA,SAErBY,0BAAA,CACA,0BACA,uBACA,oBAEAC,kBAAA,CACA,4BACA,uBACA,oBAEAC,kBAAA,CACA,MAAgB,qCAChB,+CACA,QAAgB,mBAChB,CAAaC,QAAA,gBAEbC,UAAA,CACA,MAAgB,qCAChB,+CACA,MAAgB,+BAChB,yCACA,CAAaD,QAAA,gBAEbE,YAAA,CACA,iBACAC,MAAA,CACAC,iBAAA,CAA2C1B,MAAA,cAC3C2B,WAAA,mBAIA,gCAEA,eAEA,yBACA,0CAEA,0BACA,0BAEA,iEACA,+DACA,iEAEA,0CAA6C,gBAE7C,6CACA,+CACA,kDACA,oCACA,yCACA,yBACA,qBAGAC,cAAA,CACA,8CACA,2BACA,iCACA,uCACA,sCACA,mCACA,iCACA,+BACA,+BACA,kCACA,mCACA,kCACA,sCACA,wCACA,mCACA,kCACA,wCACA,+BACA,8BACA,sCACA,yCACA,wBACA,kBAEAC,QAAA","file":"js/chunk-2d0abc00.1e61764e.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n// Allow for running under nodejs/requirejs in tests\r\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\r\nvar EMPTY_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\r\n    comments: {\r\n        blockComment: ['<!--', '-->']\r\n    },\r\n    brackets: [\r\n        ['<!--', '-->'],\r\n        ['<', '>'],\r\n        ['{', '}'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n        { open: '<', close: '>' }\r\n    ],\r\n    onEnterRules: [\r\n        {\r\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\r\n            action: { indentAction: _monaco.languages.IndentAction.IndentOutdent }\r\n        },\r\n        {\r\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            action: { indentAction: _monaco.languages.IndentAction.Indent }\r\n        }\r\n    ],\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '',\r\n    // ignoreCase: true,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            [/@@/],\r\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.root' }],\r\n            [/<!DOCTYPE/, 'metatag.html', '@doctype'],\r\n            [/<!--/, 'comment.html', '@comment'],\r\n            [/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\r\n            [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\r\n            [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\r\n            [/(<)([:\\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/(<\\/)(\\w+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/</, 'delimiter.html'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/[^<@]+/],\r\n        ],\r\n        doctype: [\r\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.comment' }],\r\n            [/[^>]+/, 'metatag.content.html'],\r\n            [/>/, 'metatag.html', '@pop'],\r\n        ],\r\n        comment: [\r\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.comment' }],\r\n            [/-->/, 'comment.html', '@pop'],\r\n            [/[^-]+/, 'comment.content.html'],\r\n            [/./, 'comment.content.html']\r\n        ],\r\n        otherTag: [\r\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.otherTag' }],\r\n            [/\\/?>/, 'delimiter.html', '@pop'],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/[ \\t\\r\\n]+/],\r\n        ],\r\n        // -- BEGIN <script> tags handling\r\n        // After <script\r\n        script: [\r\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.script' }],\r\n            [/type/, 'attribute.name', '@scriptAfterType'],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/(<\\/)(script\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\r\n        ],\r\n        // After <script ... type\r\n        scriptAfterType: [\r\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.scriptAfterType' }],\r\n            [/=/, 'delimiter', '@scriptAfterTypeEquals'],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <script ... type =\r\n        scriptAfterTypeEquals: [\r\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.scriptAfterTypeEquals' }],\r\n            [/\"([^\"]*)\"/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],\r\n            [/'([^']*)'/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <script ... type = $S2\r\n        scriptWithCustomType: [\r\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.scriptWithCustomType.$S2' }],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.$S2', nextEmbedded: '$S2' }],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        scriptEmbedded: [\r\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInEmbeddedState.scriptEmbedded.$S2', nextEmbedded: '@pop' }],\r\n            [/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\r\n        ],\r\n        // -- END <script> tags handling\r\n        // -- BEGIN <style> tags handling\r\n        // After <style\r\n        style: [\r\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.style' }],\r\n            [/type/, 'attribute.name', '@styleAfterType'],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/(<\\/)(style\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\r\n        ],\r\n        // After <style ... type\r\n        styleAfterType: [\r\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.styleAfterType' }],\r\n            [/=/, 'delimiter', '@styleAfterTypeEquals'],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <style ... type =\r\n        styleAfterTypeEquals: [\r\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.styleAfterTypeEquals' }],\r\n            [/\"([^\"]*)\"/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],\r\n            [/'([^']*)'/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <style ... type = $S2\r\n        styleWithCustomType: [\r\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.styleWithCustomType.$S2' }],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.$S2', nextEmbedded: '$S2' }],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        styleEmbedded: [\r\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInEmbeddedState.styleEmbedded.$S2', nextEmbedded: '@pop' }],\r\n            [/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\r\n        ],\r\n        // -- END <style> tags handling\r\n        razorInSimpleState: [\r\n            [/@\\*/, 'comment.cs', '@razorBlockCommentTopLevel'],\r\n            [/@[{(]/, 'metatag.cs', '@razorRootTopLevel'],\r\n            [/(@)(\\s*[\\w]+)/, ['metatag.cs', { token: 'identifier.cs', switchTo: '@$S2.$S3' }]],\r\n            [/[})]/, { token: 'metatag.cs', switchTo: '@$S2.$S3' }],\r\n            [/\\*@/, { token: 'comment.cs', switchTo: '@$S2.$S3' }],\r\n        ],\r\n        razorInEmbeddedState: [\r\n            [/@\\*/, 'comment.cs', '@razorBlockCommentTopLevel'],\r\n            [/@[{(]/, 'metatag.cs', '@razorRootTopLevel'],\r\n            [/(@)(\\s*[\\w]+)/, ['metatag.cs', { token: 'identifier.cs', switchTo: '@$S2.$S3', nextEmbedded: '$S3' }]],\r\n            [/[})]/, { token: 'metatag.cs', switchTo: '@$S2.$S3', nextEmbedded: '$S3' }],\r\n            [/\\*@/, { token: 'comment.cs', switchTo: '@$S2.$S3', nextEmbedded: '$S3' }],\r\n        ],\r\n        razorBlockCommentTopLevel: [\r\n            [/\\*@/, '@rematch', '@pop'],\r\n            [/[^*]+/, 'comment.cs'],\r\n            [/./, 'comment.cs']\r\n        ],\r\n        razorBlockComment: [\r\n            [/\\*@/, 'comment.cs', '@pop'],\r\n            [/[^*]+/, 'comment.cs'],\r\n            [/./, 'comment.cs']\r\n        ],\r\n        razorRootTopLevel: [\r\n            [/\\{/, 'delimiter.bracket.cs', '@razorRoot'],\r\n            [/\\(/, 'delimiter.parenthesis.cs', '@razorRoot'],\r\n            [/[})]/, '@rematch', '@pop'],\r\n            { include: 'razorCommon' }\r\n        ],\r\n        razorRoot: [\r\n            [/\\{/, 'delimiter.bracket.cs', '@razorRoot'],\r\n            [/\\(/, 'delimiter.parenthesis.cs', '@razorRoot'],\r\n            [/\\}/, 'delimiter.bracket.cs', '@pop'],\r\n            [/\\)/, 'delimiter.parenthesis.cs', '@pop'],\r\n            { include: 'razorCommon' }\r\n        ],\r\n        razorCommon: [\r\n            [/[a-zA-Z_]\\w*/, {\r\n                    cases: {\r\n                        '@razorKeywords': { token: 'keyword.cs' },\r\n                        '@default': 'identifier.cs'\r\n                    }\r\n                }],\r\n            // brackets\r\n            [/[\\[\\]]/, 'delimiter.array.cs'],\r\n            // whitespace\r\n            [/[ \\t\\r\\n]+/],\r\n            // comments\r\n            [/\\/\\/.*$/, 'comment.cs'],\r\n            [/@\\*/, 'comment.cs', '@razorBlockComment'],\r\n            // strings\r\n            [/\"([^\"]*)\"/, 'string.cs'],\r\n            [/'([^']*)'/, 'string.cs'],\r\n            // simple html\r\n            [/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\r\n            [/(<)(\\w+)(>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\r\n            [/(<\\/)(\\w+)(>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\r\n            // delimiters\r\n            [/[\\+\\-\\*\\%\\&\\|\\^\\~\\!\\=\\<\\>\\/\\?\\;\\:\\.\\,]/, 'delimiter.cs'],\r\n            // numbers\r\n            [/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float.cs'],\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float.cs'],\r\n            [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex.cs'],\r\n            [/0[0-7']*[0-7]/, 'number.octal.cs'],\r\n            [/0[bB][0-1']*[0-1]/, 'number.binary.cs'],\r\n            [/\\d[\\d']*/, 'number.cs'],\r\n            [/\\d/, 'number.cs'],\r\n        ]\r\n    },\r\n    razorKeywords: [\r\n        'abstract', 'as', 'async', 'await', 'base', 'bool',\r\n        'break', 'by', 'byte', 'case',\r\n        'catch', 'char', 'checked', 'class',\r\n        'const', 'continue', 'decimal', 'default',\r\n        'delegate', 'do', 'double', 'descending',\r\n        'explicit', 'event', 'extern', 'else',\r\n        'enum', 'false', 'finally', 'fixed',\r\n        'float', 'for', 'foreach', 'from',\r\n        'goto', 'group', 'if', 'implicit',\r\n        'in', 'int', 'interface', 'internal',\r\n        'into', 'is', 'lock', 'long', 'nameof',\r\n        'new', 'null', 'namespace', 'object',\r\n        'operator', 'out', 'override', 'orderby',\r\n        'params', 'private', 'protected', 'public',\r\n        'readonly', 'ref', 'return', 'switch',\r\n        'struct', 'sbyte', 'sealed', 'short',\r\n        'sizeof', 'stackalloc', 'static', 'string',\r\n        'select', 'this', 'throw', 'true',\r\n        'try', 'typeof', 'uint', 'ulong',\r\n        'unchecked', 'unsafe', 'ushort', 'using',\r\n        'var', 'virtual', 'volatile', 'void', 'when',\r\n        'while', 'where', 'yield',\r\n        'model', 'inject' // Razor specific\r\n    ],\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n};\r\n"],"sourceRoot":""}