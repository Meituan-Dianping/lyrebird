{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/handlebars/handlebars.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","_monaco","monaco","self","EMPTY_ELEMENTS","wordPattern","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","onEnterRules","beforeText","RegExp","join","afterText","action","indentAction","languages","IndentAction","IndentOutdent","Indent","defaultToken","tokenPostfix","tokenizer","root","token","switchTo","next","doctype","comment","otherTag","script","nextEmbedded","scriptAfterType","scriptAfterTypeEquals","scriptWithCustomType","scriptEmbedded","style","styleAfterType","styleAfterTypeEquals","styleWithCustomType","styleEmbedded","handlebarsInSimpleState","include","handlebarsInEmbeddedState","handlebarsRoot"],"mappings":"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","file":"js/chunk-2d0c46d1.a90d3520.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n// Allow for running under nodejs/requirejs in tests\r\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\r\nvar EMPTY_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\r\n    comments: {\r\n        blockComment: ['{{!--', '--}}']\r\n    },\r\n    brackets: [\r\n        ['<!--', '-->'],\r\n        ['<', '>'],\r\n        ['{{', '}}'],\r\n        ['{', '}'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' }\r\n    ],\r\n    onEnterRules: [\r\n        {\r\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\r\n            action: { indentAction: _monaco.languages.IndentAction.IndentOutdent }\r\n        },\r\n        {\r\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            action: { indentAction: _monaco.languages.IndentAction.Indent }\r\n        }\r\n    ],\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '',\r\n    // ignoreCase: true,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.root' }],\r\n            [/<!DOCTYPE/, 'metatag.html', '@doctype'],\r\n            [/<!--/, 'comment.html', '@comment'],\r\n            [/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\r\n            [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\r\n            [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\r\n            [/(<)([:\\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/(<\\/)(\\w+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/</, 'delimiter.html'],\r\n            [/\\{/, 'delimiter.html'],\r\n            [/[^<{]+/] // text\r\n        ],\r\n        doctype: [\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.comment' }],\r\n            [/[^>]+/, 'metatag.content.html'],\r\n            [/>/, 'metatag.html', '@pop'],\r\n        ],\r\n        comment: [\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.comment' }],\r\n            [/-->/, 'comment.html', '@pop'],\r\n            [/[^-]+/, 'comment.content.html'],\r\n            [/./, 'comment.content.html']\r\n        ],\r\n        otherTag: [\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.otherTag' }],\r\n            [/\\/?>/, 'delimiter.html', '@pop'],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/[ \\t\\r\\n]+/],\r\n        ],\r\n        // -- BEGIN <script> tags handling\r\n        // After <script\r\n        script: [\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.script' }],\r\n            [/type/, 'attribute.name', '@scriptAfterType'],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/(<\\/)(script\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\r\n        ],\r\n        // After <script ... type\r\n        scriptAfterType: [\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.scriptAfterType' }],\r\n            [/=/, 'delimiter', '@scriptAfterTypeEquals'],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <script ... type =\r\n        scriptAfterTypeEquals: [\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.scriptAfterTypeEquals' }],\r\n            [/\"([^\"]*)\"/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],\r\n            [/'([^']*)'/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <script ... type = $S2\r\n        scriptWithCustomType: [\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.scriptWithCustomType.$S2' }],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.$S2', nextEmbedded: '$S2' }],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        scriptEmbedded: [\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInEmbeddedState.scriptEmbedded.$S2', nextEmbedded: '@pop' }],\r\n            [/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\r\n        ],\r\n        // -- END <script> tags handling\r\n        // -- BEGIN <style> tags handling\r\n        // After <style\r\n        style: [\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.style' }],\r\n            [/type/, 'attribute.name', '@styleAfterType'],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/(<\\/)(style\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\r\n        ],\r\n        // After <style ... type\r\n        styleAfterType: [\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.styleAfterType' }],\r\n            [/=/, 'delimiter', '@styleAfterTypeEquals'],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <style ... type =\r\n        styleAfterTypeEquals: [\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.styleAfterTypeEquals' }],\r\n            [/\"([^\"]*)\"/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],\r\n            [/'([^']*)'/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <style ... type = $S2\r\n        styleWithCustomType: [\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.styleWithCustomType.$S2' }],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.$S2', nextEmbedded: '$S2' }],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        styleEmbedded: [\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInEmbeddedState.styleEmbedded.$S2', nextEmbedded: '@pop' }],\r\n            [/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\r\n        ],\r\n        // -- END <style> tags handling\r\n        handlebarsInSimpleState: [\r\n            [/\\{\\{\\{?/, 'delimiter.handlebars'],\r\n            [/\\}\\}\\}?/, { token: 'delimiter.handlebars', switchTo: '@$S2.$S3' }],\r\n            { include: 'handlebarsRoot' }\r\n        ],\r\n        handlebarsInEmbeddedState: [\r\n            [/\\{\\{\\{?/, 'delimiter.handlebars'],\r\n            [/\\}\\}\\}?/, { token: 'delimiter.handlebars', switchTo: '@$S2.$S3', nextEmbedded: '$S3' }],\r\n            { include: 'handlebarsRoot' }\r\n        ],\r\n        handlebarsRoot: [\r\n            [/[#/][^\\s}]+/, 'keyword.helper.handlebars'],\r\n            [/else\\b/, 'keyword.helper.handlebars'],\r\n            [/[\\s]+/],\r\n            [/[^}]/, 'variable.parameter.handlebars'],\r\n        ],\r\n    },\r\n};\r\n"],"sourceRoot":""}